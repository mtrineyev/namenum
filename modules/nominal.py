"""
Translates natural numbers as well as powers of 10 into their nominal names

Methods:
    translate_num(value: int, short=False) -> str
        To convert integer to its nominal name
    
    translate_10power(value: int) -> str:
        To return power of 10 name

NameTheNumberBot v1.0 (c) 2020 Maksym Trineyev
mtrineyev@gmail.com
"""

import consts.msg as msg


numbers = {
    0: 'нуль',
    1: 'один',
    2: 'два',
    3: 'три',
    4: 'чотири',
    5: "п'ять",
    6: 'шість',
    7: 'сім',
    8: 'вісім',
    9: "дев'ять",
    10: 'десять',
    11: 'одиннадцять',
    12: 'дванадцять',
    13: 'тринаднять',
    14: 'чотирнадцять',
    15: "п'ятнадцять",
    16: 'шістнадцять',
    17: 'сімнадцять',
    18: 'вісімнадцять',
    19: "дев'ятнадцять",
    20: 'двадцять',
    30: 'тридцять',
    40: 'сорок',
    50: "п'ятдесят",
    60: 'шістдесят',
    70: 'сімдесят',
    80: 'вісімдесят',
    90: "дев'яносто",
    100: 'сто',
    200: 'двісті',
    300: 'триста',
    400: 'чотириста',
    500: "п'ятсот",
    600: 'шістсот',
    700: 'сімсот',
    800: 'вісімсот',
    900: "дев'ятсот",
}

powers10 = {
    0: ('один', 'один', 'один'),
    1: ('десять', 'десять', 'десять'),
    2: ('сто', 'сотні', 'сотень'),
    3: ('тисяча', 'тисячи', 'тисяч'),
    6: ('мільйон', 'мільйони', 'мільйонів'),
    9: ('мільярд', 'мільярди', 'мільярдів'),
    12: ('трильйон', 'трильйони', 'трильйонів'),
    15: ('квадрильйон', 'квадрильйони', 'квадрильйонів'),
    18: ('квінтильйон', 'квінтильйони', 'квінтильйонів'),
    21: ('секстильйон', 'секстильйони', 'секстильйонів'),
    24: ('септильйон', 'септильйони', 'септильйонів'),
    27: ('октильйон', 'октильйони', 'октильйонів'),
    30: ('нонильйон', 'нонильйони', 'нонильйонів'),
    33: ('децильйон', 'децильйони', 'децильйонів'),
    36: ('ундецильйон', 'ундецильйони', 'ундецильйонів'),
    39: ('додецильйон', 'додецильйони', 'додецильйонів'),
    42: ('тредецильйон', 'тредецильйони', 'тредецильйонів'),
    45: ('кваттуордецильйон', 'кваттуордецильйони', 'кваттуордецильйонів'),
    48: ('квіндецильйон', 'квіндецильйони', 'квіндецильйонів'),
    51: ('седецильйон', 'седецильйони', 'седецильйонів'),
    54: ('септдецильйон', 'септдецильйони', 'септдецильйонів'),
    57: ('дуодевігінтильйон', 'дуодевігінтильйони', 'дуодевігінтильйонів'),
    60: ('ундевігінтильйон', 'ундевігінтильйони', 'ундевігінтильйонів'),
    63: ('вігінтильйон', 'вігінтильйони', 'вігінтильйонів'),
    66: ('анвігінтильйон', 'анвігінтильйони', 'анвігінтильйонів'),
    69: ('дуовігінтильйон', 'дуовігінтильйони', 'дуовігінтильйонів'),
    72: ('тревігінтильйон', 'тревігінтильйони', 'тревігінтильйонів'),
    75: ('кватторвігінтильйон', 'кватторвігінтильйони',
        'кватторвігінтильйонів'),
    78: ('квінвігінтильйон', 'квінвігінтильйони', 'квінвігінтильйонів'),
    81: ('сексвігінтильйон', 'сексвігінтильйони', 'сексвігінтильйонів'),
    84: ('септемвігінтильйон', 'септемвігінтильйони',
        'септемвігінтильйонів'),
    87: ('октовігінтильйон', 'октовігінтильйони', 'октовігінтильйонів'),
    90: ('новемвігінтильйон', 'новемвігінтильйони', 'новемвігінтильйонів'),
    93: ('трігінтильйон', 'трігінтильйони', 'трігінтильйонів'),
    96: ('антрігінтильйон', 'антрігінтильйони', 'антрігінтильйонів'),
    99: ('дуотрігінтильйон', 'дуотрігінтильйони', 'дуотрігінтильйонів'),
    100: ('гугол', 'гуголи', 'гуголів'),
    102: ('третрігінтильйон', 'третрігінтильйони', 'третрігінтильйонів'),
    105: ('кваттортрігінтильйон', 'кваттортрігінтильйони',
        'кваттортрігінтильйонів'),
    108: ('квінтрігінтильйон', 'квінтрігінтильйони', 'квінтрігінтильйонів'),
    111: ('секстрігінтильйон', 'секстрігінтильйони', 'секстрігінтильйонів'),
    114: ('септемтрігінтильйон', 'септемтрігінтильйони',
        'септемтрігінтильйонів'),
    117: ('октотрігінтильйон', 'октотрігінтильйони', 'октотрігінтильйонів'),
    120: ('новемтрігінтильйон', 'новемтрігінтильйони',
        'новемтрігінтильйонів'),
    123: ('квадрагінтильйон', 'квадрагінтильйони', 'квадрагінтильйонів'),
    153: ('квінквагінтильйон', 'квінквагінтильйони', 'квінквагінтильйонів'),
    183: ('сексагінтильйон', 'сексагінтильйони', 'сексагінтильйонів'),
    213: ('септуагінтильйон', 'септуагінтильйони', 'септуагінтильйонів'),
    243: ('октогінтильйон', 'октогінтильйони', 'октогінтильйонів'),
    273: ('нонагінтильйон', 'нонагінтильйони', 'нонагінтильйонів'),
    600: ('центильйон', 'центильйони', 'центильйонів'),
    603: ('дуцентильйон', 'дуцентильйони', 'дуцентильйонів'),
    606: ('трецентильйон', 'трецентильйони', 'трецентильйонів'),
    609: ('кватторцентильйон', 'кватторцентильйони', 'кватторцентильйонів'),
    666: ('діаблотильйон 😈', 'діаблотильйони 😈', 'діаблотильйонів 😈'),
    308760: ('дуцентдуоміліанонгентновемдецільйон',
        'дуцентдуоміліанонгентновемдецільйони',
        'дуцентдуоміліанонгентновемдецільйонів'),
}


def _plural(amount: int, plurals: tuple) -> str:
    """Returns corresponding plural from the tuple to 1, 2, 5 principal"""
    if amount == 0: return ''
    mod = amount % 100
    if mod > 20: mod %= 10
    if mod == 1:
        result = plurals[0]
    elif mod in (2, 3, 4):
        result = plurals[1]
    else:
        result = plurals[2]
    return f' {result} '


def _hundreds(value: int, short: bool) -> str:
    """Convert small int to its nominal name or just return str"""
    if short:
        return str(value)
    result = ''
    hundreds, tens = divmod(value, 100)
    if hundreds:
        result = numbers[hundreds * 100] + ' '
    if not tens and not hundreds:
        result = numbers[0]
    elif tens <= 20:
        result += numbers[tens]
    else:
        tens, units = divmod(tens, 10)
        result += numbers[tens * 10]
        if units:
            result += ' ' + numbers[units]
    return result.strip()


def translate_num(value: int, short=False) -> str:
    """To convert big integer to its nominal name"""
    result = ''
    grades = f'{value:,d}'.split(',')
    grade_pow = (len(grades) - 1) * 3
    for gr in grades:
        n = int(gr)
        if n or not result:
            result += _hundreds(n, short)
            if grade_pow:
                try:
                    result += _plural(n, powers10[grade_pow])
                except KeyError:
                    return msg.translate_num_key_err
        grade_pow -= 3
    result = result.replace('один тисяча', 'одна тисяча')
    result = result.replace('два тисячи', 'дві тисячи')
    return result.capitalize()


def translate_10power(value: int) -> str:
    """To return power of 10 name"""
    if value in powers10:
        result = f'{numbers[1]} {powers10[value][0]}'
    elif value - 1 in powers10:
        result = f'{numbers[10]} {powers10[value - 1][2]}'
    elif value - 2 in powers10:
        result = f'{numbers[10]} {powers10[value - 2][2]}'
    else:
        result = msg.power10_too_big.format(value)
    return result.capitalize()


if __name__ == '__main__':
    print(__doc__)
